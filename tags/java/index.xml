<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java on Devflection</title>
    <link>https://devflection.com/tags/java/</link>
    <description>Recent content in java on Devflection</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>matija@devflection.com (Matija Heričko)</managingEditor>
    <webMaster>matija@devflection.com (Matija Heričko)</webMaster>
    <lastBuildDate>Thu, 16 May 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://devflection.com/tags/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Classloaders in Java</title>
      <link>https://devflection.com/posts/2019-05-14-classloaders/</link>
      <pubDate>Thu, 16 May 2019 00:00:00 +0000</pubDate>
      <author>matija@devflection.com (Matija Heričko)</author>
      <guid>https://devflection.com/posts/2019-05-14-classloaders/</guid>
      <description>&lt;p&gt;In this post, we will be looking at a very important part of the&lt;br /&gt;
&lt;strong&gt;J&lt;/strong&gt;ava &lt;strong&gt;R&lt;/strong&gt;untime &lt;strong&gt;E&lt;/strong&gt;nvironment (or &lt;strong&gt;JRE&lt;/strong&gt;) - &lt;strong&gt;Class loaders.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We will look at what they are, how they work and how we can implement our own custom class loader.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java Archive file - JAR</title>
      <link>https://devflection.com/posts/2019-04-30-java-archive-file/</link>
      <pubDate>Tue, 30 Apr 2019 00:00:00 +0000</pubDate>
      <author>matija@devflection.com (Matija Heričko)</author>
      <guid>https://devflection.com/posts/2019-04-30-java-archive-file/</guid>
      <description>&lt;p&gt;In this post, we will have a closer look at one of the basic building blocks in the Java ecosystem -
the &lt;strong&gt;J&lt;/strong&gt;ava &lt;strong&gt;AR&lt;/strong&gt;chive or as it is more known, the &lt;b&gt;JAR&lt;/b&gt; file.&lt;br /&gt;
We will describe what it is and how to create one.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Reflection in Java</title>
      <link>https://devflection.com/posts/2019-04-14-reflection-in-java/</link>
      <pubDate>Sun, 14 Apr 2019 00:00:00 +0000</pubDate>
      <author>matija@devflection.com (Matija Heričko)</author>
      <guid>https://devflection.com/posts/2019-04-14-reflection-in-java/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Reflection&lt;/strong&gt; is the ability of an application to inspect &lt;strong&gt;and&lt;/strong&gt; modify the code in the system.&lt;/p&gt;

&lt;p&gt;If an application can only inspect but not also modify the code then it only has the ability of introspection.&lt;/p&gt;

&lt;p&gt;So for an application to be reflective it must also be able to modify its code at runtime.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>